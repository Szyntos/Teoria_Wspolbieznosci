FourConditionHasWaitersStarvation:
Buffer.capacity = 10;

# Initial State
LockQ = {C1(1), P4(2)}
inBuffer = 10
FirstProducer = {P1(5)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {P3(1), P4(2)}
inBuffer = 9 -> C1(1) - signals P1(5)
FirstProducer = {P1(5)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P1'(5), P4(2)}
inBuffer = 10 -> P3(1) - P1(5) is not on FirstCond, so any other Prod can produce,
                                                    P1(5) did not produce - starvation
FirstProducer = {}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1), P4(2)}
inBuffer = 10 -/> P1'(5)
FirstProducer = {}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1), P4(2)}
inBuffer = 10
FirstProducer = {P1(5)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {P3(1), P4(2)}
inBuffer = 9 -> C1(1) - signals FirstProd
FirstProducer = {P1(5)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1), P4(2), P1'(5)}
inBuffer = 9
FirstProducer = {}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1), P1'(5)}
inBuffer = 9 -/> P4(2)
FirstProducer = {}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1), P1'(5)}
inBuffer = 9
FirstProducer = {P4(2)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1)}
inBuffer = 9 -/> P1(5)
FirstProducer = {P4(2)}
RestProducers = {P1(3), P2(5)}
Consumers = ...

LockQ = {C1(1), P3(1)}
inBuffer = 9
FirstProducer = {P4(2), P1(5)} -> we have two producers on FirstProducer - starvation
RestProducers = {P1(3), P2(5)}
Consumers = ...